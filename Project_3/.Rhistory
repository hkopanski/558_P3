ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- na.omit(Hitters$Salary)
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[, 50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred=predict(ridge.mod,s=1e10,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred=predict(ridge.mod,s=0,newx=x[test,],exact=T)
mean((ridge.pred-y.test)^2)
lm(y∼x,subset=train)
predict(ridge.mod,s=0,exact=T,type="coefficients")[1:20,]
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=T)
mean((ridge.pred-y.test)^2)
ridge.pred=predict(ridge.mod,s=1e10,newx=x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=T)
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=TRUE)
mean((ridge.pred-y.test)^2)
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- na.omit(Hitters$Salary)
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[, 50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred = predict(ridge.mod, s=1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=TRUE)
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- na.omit(Hitters$Salary)
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[, 50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
Hitters <- na.omit(Hitters)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- Hitters$Salary
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
Hitters <- na.omit(Hitters)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- Hitters$Salary
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[, 50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred = predict(ridge.mod, s=1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=TRUE)
mean((ridge.pred-y.test)^2)
library(ggplot2)
library(ISLR)
library(leaps)
library(glmnet)
Hitters <- na.omit(Hitters)
x <- model.matrix(Salary ~ ., Hitters)[, -1]
y <- Hitters$Salary
grid <- 10^seq(10,-2,length = 100)
ridge.mod <- glmnet(x,y,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[, 50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
predict(ridge.mod,s=50,type="coefficients")[1:20,]
set.seed(1)
train <- sample(1:nrow(x),nrow(x)/2)
test  <-(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred = predict(ridge.mod, s=1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s=0, newx = x[test,], exact=TRUE)
mean((ridge.pred-y.test)^2)
lm(y∼x,subset=train)
predict(ridge.mod,s=0,exact=T,type="coefficients")[1:20,]
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)[1:20,]
install.packages("unix")
library(MASS)
library(tree)
library(ISLR)
library(randomForest)
library(gbm)
set.seed(1)
train <- sample(1:nrow(Carseats), nrow(Boston) / 2)
carseat.test <- Carseats[-train, 'Sales']
set.seed(1)
tree.Carseats <- tree(Sales ~ ., Carseats, subset = train)
summary(tree.Carseats)
plot(tree.Carseats)
text(tree.Carseats, pretty = 0)
yhat <- predict(tree.Carseats, newdata = Carseats[-train, ])
plot(yhat, carseat.test)
abline(0,1)
mean((yhat - carseat.test)^2)
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
abline(v = x1)
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
abline(v = -3:1)
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l", lwt = 5)
abline(v = -3:1, h = seq(0,2,0.5))
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l", lty = 5)
abline(v = -3:1, h = seq(0,2,0.5))
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l", lty = 2)
abline(v = -3:1, h = seq(0,2,0.5))
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l", lty = 3)
abline(v = -3:1, h = seq(0,2,0.5))
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
abline(v = -3:1, h = seq(0,2,0.5, lty = 3)
)
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
abline(v = -3:1, h = seq(0,2,0.5, lty = 3))
x1 <- seq(-3,1,0.1)
x2 <- 4 - (1 + x1)^2
x2 <- 2 - sqrt(x2)
plot(x1, x2, pch = 20, type = "l")
abline(v = -3:1, h = seq(0,2,0.5), lty = 3)
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
df_data <- data.frame(cbind(x1, x2))
plot(df_data)
set.seed(10)
labels <- sample(1:2, 6, replace = TRUE)
df_data <- data.frame(cbind(x1, x2, labels))
print(df_data)
plot(df_data$x1,df_data$x2, col = df_data$labels)
centr_1 <- c(mean(df_data[df_data$labels == 1, ]$x1), mean(df_data[df_data$labels == 1, ]$x2))
centr_2 <- c(mean(df_data[df_data$labels == 2, ]$x1), mean(df_data[df_data$labels == 2, ]$x2))
print(centr_1)
print(centr_2)
plot(df_data$x1, df_data$x2, col = df_data$labels)
points(centr_1[1], centr_1[2], pch = 19, col = 'black')
points(centr_2[1], centr_2[2], pch = 19, col = 'red')
for (i in 1:6){
if (df_data[i, 3] == 1){
print(dist(rbind(df_data[i,1:2], centr_1)))
} else {
print(dist(rbind(df_data[i,1:2], centr_2)))
}
}
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
df_data <- data.frame(cbind(x1, x2))
plot(df_data)
set.seed(10)
labels <- sample(1:2, 6, replace = TRUE)
df_data <- data.frame(cbind(x1, x2, labels))
print(df_data)
plot(df_data$x1,df_data$x2, col = df_data$labels)
centr_1 <- c(mean(df_data[df_data$labels == 1, ]$x1), mean(df_data[df_data$labels == 1, ]$x2))
centr_2 <- c(mean(df_data[df_data$labels == 2, ]$x1), mean(df_data[df_data$labels == 2, ]$x2))
print(centr_1)
print(centr_2)
plot(df_data$x1, df_data$x2, col = df_data$labels)
points(centr_1[1], centr_1[2], pch = 19, col = 'black')
points(centr_2[1], centr_2[2], pch = 19, col = 'red')
df_data$dc1 <- 0
df_data$dc2 <- 0
for (i in 1:6){
df_data$dc1[i] <- dist(rbind(df_data[i,1:2], centr_1))
df_data$dc2[i] <- dist(rbind(df_data[i,1:2], centr_2))
if (df_data$dc1[i] < df_data$dc2[i]) {
df_data$labels[i] = 1
} else {
df_data$labels[i] = 2
}
}
print(df_data)
centr_1 <- c(mean(df_data[df_data$labels == 1, ]$x1), mean(df_data[df_data$labels == 1, ]$x2))
centr_2 <- c(mean(df_data[df_data$labels == 2, ]$x1), mean(df_data[df_data$labels == 2, ]$x2))
print(centr_1)
print(centr_2)
plot(df_data$x1, df_data$x2, col = df_data$labels)
points(centr_1[1], centr_1[2], pch = 19, col = 'black')
points(centr_2[1], centr_2[2], pch = 19, col = 'red')
for (i in 1:6){
df_data$dc1[i] <- dist(rbind(df_data[i,1:2], centr_1))
df_data$dc2[i] <- dist(rbind(df_data[i,1:2], centr_2))
if (df_data$dc1[i] < df_data$dc2[i]) {
df_data$labels[i] = 1
} else {
df_data$labels[i] = 2
}
}
print(df_data)
centr_1 <- c(mean(df_data[df_data$labels == 1, ]$x1), mean(df_data[df_data$labels == 1, ]$x2))
centr_2 <- c(mean(df_data[df_data$labels == 2, ]$x1), mean(df_data[df_data$labels == 2, ]$x2))
print(centr_1)
print(centr_2)
plot(df_data$x1, df_data$x2, col = df_data$labels)
points(centr_1[1], centr_1[2], pch = 19, col = 'black')
points(centr_2[1], centr_2[2], pch = 19, col = 'red')
table(titanic$sex, titanic$survive)
table(Titanic$sex, Titanic$survive)
str(Titanic)
table(Titanic$Sex, Titanic$Survived)
table(c(Titanic$Sex, Titanic$Survived))
table(c(Titanic[[2]], Titanic[[4]]))
table(Titanic[[2]], Titanic[[4]])
Titanic[[2]]
Titanic[1,2]
Titanic[1]
Titanic[2]
Titanic[3]
summary(Titanic)
Titanic[['Sex']]
Titanic['Sex']
Titanic['Sex',]
is.list(Titanic)
is.table(Titanic)
?table
?table()
table(mtcars$gear, mtcars$carb)
str(table(mtcars$gear, mtcars$carb))
shiny::runApp('Documents/Document_Backup/ST_558/Project_3/Project_3')
runApp('Documents/Document_Backup/ST_558/Project_3/Project_3')
library(shiny)
library(tidyverse)
library(maps)
library(forcats)
library(MASS)
library(caret)
library(DT)
df_pulsar <- read_csv("./Data/HTRU_2.csv", col_names = FALSE)
names(df_pulsar) <- c("integ_mean","integ_sd","integ_exkur","integ_skew",
"DMSNR_mean","DMSNR_sd","DMSNR_exkur","DMSNR_skew","Class")
df_pulsar <- df_pulsar %>%
mutate(Class = ifelse(Class == 1, "Pulsar", "Non Pulsar"))
df_pulsar$Class <- as.factor(df_pulsar$Class)
var <- names(df_pulsar)
proper_names <- c("Integrated Mean", "Integrated Standard Deviation",
"Integrated Kurtosis", "Intergrated Skew",
"DMSNR Mean", "DMSNR Standard Deviation", "DMSNR Kurtosis",
"DMSNR Skew")
var_sel1 <- "i_mean"
var_sel2 <- "d_skew"
var1 <- switch(var_sel1,
i_mean = var[1],
i_sd   = var[2],
i_kurt = var[3],
i_skew = var[4])
var2 <- switch(var_sel2,
d_mean = var[5],
d_sd   = var[6],
d_kurt = var[7],
d_skew = var[8])
p1 <- df_pulsar %>% rename(x = all_of(var1), y = all_of(var2)) %>%
ggplot() + geom_point(aes(x = x, y = y, col = Class))
print(p1)
df_pulsar %>% head()
setwd("~/Documents/Document_Backup/ST_558/Project_3/Project_3")
library(shiny)
library(tidyverse)
library(maps)
library(forcats)
library(MASS)
library(caret)
library(DT)
df_pulsar <- read_csv("./Data/HTRU_2.csv", col_names = FALSE)
names(df_pulsar) <- c("integ_mean","integ_sd","integ_exkur","integ_skew",
"DMSNR_mean","DMSNR_sd","DMSNR_exkur","DMSNR_skew","Class")
df_pulsar <- df_pulsar %>%
mutate(Class = ifelse(Class == 1, "Pulsar", "Non Pulsar"))
df_pulsar$Class <- as.factor(df_pulsar$Class)
var <- names(df_pulsar)
proper_names <- c("Integrated Mean", "Integrated Standard Deviation",
"Integrated Kurtosis", "Intergrated Skew",
"DMSNR Mean", "DMSNR Standard Deviation", "DMSNR Kurtosis",
"DMSNR Skew")
var_sel1 <- "i_mean"
var_sel2 <- "d_skew"
var1 <- switch(var_sel1,
i_mean = var[1],
i_sd   = var[2],
i_kurt = var[3],
i_skew = var[4])
var2 <- switch(var_sel2,
d_mean = var[5],
d_sd   = var[6],
d_kurt = var[7],
d_skew = var[8])
p1 <- df_pulsar %>% rename(x = all_of(var1), y = all_of(var2)) %>%
ggplot() + geom_point(aes(x = x, y = y, col = Class))
print(p1)
df_pulsar %>% head()
library(shiny)
library(tidyverse)
library(maps)
library(forcats)
library(MASS)
library(caret)
library(DT)
df_pulsar <- read_csv("./Data/HTRU_2.csv", col_names = FALSE)
names(df_pulsar) <- c("integ_mean","integ_sd","integ_exkur","integ_skew",
"DMSNR_mean","DMSNR_sd","DMSNR_exkur","DMSNR_skew","Class")
df_pulsar <- df_pulsar %>%
mutate(Class = ifelse(Class == 1, "Pulsar", "Non Pulsar"))
df_pulsar$Class <- as.factor(df_pulsar$Class)
var <- names(df_pulsar)
proper_names <- c("Integrated Mean", "Integrated Standard Deviation",
"Integrated Kurtosis", "Intergrated Skew",
"DMSNR Mean", "DMSNR Standard Deviation", "DMSNR Kurtosis",
"DMSNR Skew")
var_sel1 <- "i_skew"
var_sel2 <- "d_skew"
var1 <- switch(var_sel1,
i_mean = var[1],
i_sd   = var[2],
i_kurt = var[3],
i_skew = var[4])
var2 <- switch(var_sel2,
d_mean = var[5],
d_sd   = var[6],
d_kurt = var[7],
d_skew = var[8])
p1 <- df_pulsar %>% rename(x = all_of(var1), y = all_of(var2)) %>%
ggplot() + geom_point(aes(x = x, y = y, col = Class))
print(p1)
df_pulsar %>% head()
runApp()
library(shiny)
library(tidyverse)
library(maps)
library(forcats)
library(MASS)
library(caret)
library(DT)
df_pulsar <- read_csv("./Data/HTRU_2.csv", col_names = FALSE)
names(df_pulsar) <- c("integ_mean","integ_sd","integ_exkur","integ_skew",
"DMSNR_mean","DMSNR_sd","DMSNR_exkur","DMSNR_skew","Class")
df_pulsar <- df_pulsar %>%
mutate(Class = ifelse(Class == 1, "Pulsar", "Non Pulsar"))
df_pulsar$Class <- as.factor(df_pulsar$Class)
var <- names(df_pulsar)
proper_names <- c("Integrated Mean", "Integrated Standard Deviation",
"Integrated Kurtosis", "Intergrated Skew",
"DMSNR Mean", "DMSNR Standard Deviation", "DMSNR Kurtosis",
"DMSNR Skew")
var_sel1 <- "i_skew"
var_sel2 <- "d_skew"
var1 <- switch(var_sel1,
"i_mean" = var[1],
"i_sd"   = var[2],
"i_kurt" = var[3],
"i_skew" = var[4])
var2 <- switch(var_sel2,
"d_mean" = var[5],
"d_sd"   = var[6],
"d_kurt" = var[7],
"d_skew" = var[8])
p1 <- df_pulsar %>% rename(x = all_of(var1), y = all_of(var2)) %>%
ggplot() + geom_point(aes(x = x, y = y, col = Class))
print(p1)
df_pulsar %>% head()
runApp()
runApp()
runApp()
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
output$edaPlot <- renderPlot({ df_pulsar %>% rename(x = var1, y = var2) %>%
ggplot() + geom_point(aes(x = x, y = y, col = Class))
})
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
runApp('~/Documents/Document_Backup/ST_558/Project_3/eda_test')
